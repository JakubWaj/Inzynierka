// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    [Migration("20241226232215_seed2")]
    partial class seed2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42e4b138-bb40-4073-9ec0-9fd3e2fffd36"),
                            Name = "United States"
                        },
                        new
                        {
                            Id = new Guid("2d6fea9a-14b8-4dbb-a9e8-aa5d6d8bc30c"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("6ec91f5a-e7e0-443d-b437-c26c6ab0a367"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("c56f0b8b-b228-4558-b823-8f504ef236d0"),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("ce52f1cd-3e5b-4abe-8f77-d328334b3257"),
                            Name = "Canada"
                        });
                });

            modelBuilder.Entity("Domain.Entities.FavoriteMovies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FavoriteMovies");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BoxOffice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("558d0c1b-c9d8-45ca-9dfa-98e42de7153e"),
                            BoxOffice = 829895144,
                            Description = "A thief who steals corporate secrets through dream-sharing technology is tasked with planting an idea into a target's subconscious.",
                            Duration = 148,
                            Genre = 11,
                            ReleaseDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Inception"
                        },
                        new
                        {
                            Id = new Guid("436c1737-55eb-4b31-bc33-6a5c98b424f3"),
                            BoxOffice = 361000000,
                            Description = "Two teenagers share a profound connection after discovering they are swapping bodies.",
                            Duration = 106,
                            Genre = 3,
                            ReleaseDate = new DateTime(2016, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Your Name"
                        },
                        new
                        {
                            Id = new Guid("8b78da46-34ea-4d5c-b624-1f6b37244aac"),
                            BoxOffice = 466000000,
                            Description = "A hacker discovers the shocking truth about his world and his role in the fight to save humanity.",
                            Duration = 136,
                            Genre = 11,
                            ReleaseDate = new DateTime(1999, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Matrix"
                        },
                        new
                        {
                            Id = new Guid("dbbe9d3b-fdad-4019-a77d-2aed5990fd5c"),
                            BoxOffice = 701729206,
                            Description = "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
                            Duration = 169,
                            Genre = 11,
                            ReleaseDate = new DateTime(2014, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Interstellar"
                        },
                        new
                        {
                            Id = new Guid("a70f0951-6e25-4745-ba00-1822b30a76f7"),
                            BoxOffice = 395800000,
                            Description = "A young girl becomes trapped in a mysterious world of spirits and must find her way home.",
                            Duration = 125,
                            Genre = 3,
                            ReleaseDate = new DateTime(2001, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spirited Away"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MovieCountry", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MovieId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("MovieCountries");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("558d0c1b-c9d8-45ca-9dfa-98e42de7153e"),
                            CountryId = new Guid("42e4b138-bb40-4073-9ec0-9fd3e2fffd36")
                        },
                        new
                        {
                            MovieId = new Guid("436c1737-55eb-4b31-bc33-6a5c98b424f3"),
                            CountryId = new Guid("6ec91f5a-e7e0-443d-b437-c26c6ab0a367")
                        },
                        new
                        {
                            MovieId = new Guid("8b78da46-34ea-4d5c-b624-1f6b37244aac"),
                            CountryId = new Guid("42e4b138-bb40-4073-9ec0-9fd3e2fffd36")
                        },
                        new
                        {
                            MovieId = new Guid("dbbe9d3b-fdad-4019-a77d-2aed5990fd5c"),
                            CountryId = new Guid("2d6fea9a-14b8-4dbb-a9e8-aa5d6d8bc30c")
                        },
                        new
                        {
                            MovieId = new Guid("a70f0951-6e25-4745-ba00-1822b30a76f7"),
                            CountryId = new Guid("6ec91f5a-e7e0-443d-b437-c26c6ab0a367")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42078b3c-7a7b-4f50-a515-46cd6dd47313"),
                            Biography = "An American actor and film producer.",
                            BirthDate = new DateTime(1974, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Leonardo",
                            LastName = "DiCaprio"
                        },
                        new
                        {
                            Id = new Guid("b70ab35d-850e-42ec-8d0a-bec57910f478"),
                            Biography = "A Japanese animator, filmmaker, and manga artist.",
                            BirthDate = new DateTime(1973, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Makoto",
                            LastName = "Shinkai"
                        },
                        new
                        {
                            Id = new Guid("e091878c-3250-4ed1-9065-c078ffbe1720"),
                            Biography = "An actor known for his roles in The Matrix and John Wick.",
                            BirthDate = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Keanu",
                            LastName = "Reeves"
                        },
                        new
                        {
                            Id = new Guid("59494ac7-4b2f-48b4-8bde-12154c4b2959"),
                            Biography = "A British-American film director, producer, and screenwriter.",
                            BirthDate = new DateTime(1970, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Christopher",
                            LastName = "Nolan"
                        },
                        new
                        {
                            Id = new Guid("b29678fd-e162-4cfb-80fd-ac5550a1ab48"),
                            Biography = "A legendary Japanese animator and filmmaker.",
                            BirthDate = new DateTime(1941, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hayao",
                            LastName = "Miyazaki"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("558d0c1b-c9d8-45ca-9dfa-98e42de7153e"),
                            UserId = new Guid("26c7dbca-6430-4da1-acb5-a9988be1daad"),
                            Comment = "Amazing movie with a mind-blowing plot!",
                            Id = new Guid("26f109f7-2bd2-43b9-a375-c30a980f1539"),
                            Rating = 9
                        },
                        new
                        {
                            MovieId = new Guid("436c1737-55eb-4b31-bc33-6a5c98b424f3"),
                            UserId = new Guid("23e002be-2e66-4854-a6a5-ac02723aacf8"),
                            Comment = "Beautifully animated and emotionally resonant.",
                            Id = new Guid("f304888e-3a12-43d8-9404-a3690f400db9"),
                            Rating = 10
                        },
                        new
                        {
                            MovieId = new Guid("8b78da46-34ea-4d5c-b624-1f6b37244aac"),
                            UserId = new Guid("d48ac297-1879-4af2-ae79-b262af85e7a1"),
                            Comment = "A groundbreaking film with iconic visuals.",
                            Id = new Guid("829c0a6b-cfad-421c-8e4c-2e0d98c545ca"),
                            Rating = 10
                        },
                        new
                        {
                            MovieId = new Guid("dbbe9d3b-fdad-4019-a77d-2aed5990fd5c"),
                            UserId = new Guid("5dfef033-ec42-44ac-9737-720f96e97b8b"),
                            Comment = "A mesmerizing journey through space and time.",
                            Id = new Guid("6da95606-d947-492f-a0b7-f687ca8a4155"),
                            Rating = 9
                        },
                        new
                        {
                            MovieId = new Guid("a70f0951-6e25-4745-ba00-1822b30a76f7"),
                            UserId = new Guid("4324d7b5-7337-4828-b4b5-e0ec79620e1c"),
                            Comment = "A masterpiece of animation and storytelling.",
                            Id = new Guid("e2108b60-beba-47b1-aeba-3a3ae8af8567"),
                            Rating = 10
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Character")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MovieProductionRole")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a50b9019-3b0f-4866-b0d5-1623bc16d452"),
                            Character = "Dom Cobb",
                            MovieId = new Guid("558d0c1b-c9d8-45ca-9dfa-98e42de7153e"),
                            MovieProductionRole = 0,
                            PersonId = new Guid("42078b3c-7a7b-4f50-a515-46cd6dd47313")
                        },
                        new
                        {
                            Id = new Guid("d1e3256f-f31f-4024-9601-6eb5a78c0988"),
                            MovieId = new Guid("436c1737-55eb-4b31-bc33-6a5c98b424f3"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("b70ab35d-850e-42ec-8d0a-bec57910f478")
                        },
                        new
                        {
                            Id = new Guid("2a10fc8f-51e0-46aa-8e1f-4c2b9db50517"),
                            Character = "Neo",
                            MovieId = new Guid("8b78da46-34ea-4d5c-b624-1f6b37244aac"),
                            MovieProductionRole = 0,
                            PersonId = new Guid("e091878c-3250-4ed1-9065-c078ffbe1720")
                        },
                        new
                        {
                            Id = new Guid("368e3fa6-4748-4fe8-ae83-e7d3408c22b2"),
                            MovieId = new Guid("dbbe9d3b-fdad-4019-a77d-2aed5990fd5c"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("59494ac7-4b2f-48b4-8bde-12154c4b2959")
                        },
                        new
                        {
                            Id = new Guid("9303d576-8b18-4cec-b7e9-50431485b9ae"),
                            MovieId = new Guid("a70f0951-6e25-4745-ba00-1822b30a76f7"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("b29678fd-e162-4cfb-80fd-ac5550a1ab48")
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoleReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleReviews");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("26c7dbca-6430-4da1-acb5-a9988be1daad"),
                            Email = "user1@example.com",
                            Login = "user1",
                            Password = "AQAAAAIAAYagAAAAEG3rDf3Y3DK/po6Svlk0BUEzcqlxhobKUo/bTUd9VnbTLQwe0fxNlkvYXyDuANiMSg=="
                        },
                        new
                        {
                            Id = new Guid("23e002be-2e66-4854-a6a5-ac02723aacf8"),
                            Email = "user2@example.com",
                            Login = "user2",
                            Password = "AQAAAAIAAYagAAAAEDUfOB5tmFGFbqon05zoDAXfNDenqOFnslXDZAnMfmYdBwa+kWsl3zBKnR4+u+QWAg=="
                        },
                        new
                        {
                            Id = new Guid("d48ac297-1879-4af2-ae79-b262af85e7a1"),
                            Email = "user3@example.com",
                            Login = "user3",
                            Password = "AQAAAAIAAYagAAAAECwuL81BKbQiqze0jm1+3KOIZpGokGzWkL+XSY5liamwID4lWevPnLgkuBTcsJFKoQ=="
                        },
                        new
                        {
                            Id = new Guid("5dfef033-ec42-44ac-9737-720f96e97b8b"),
                            Email = "user4@example.com",
                            Login = "user4",
                            Password = "AQAAAAIAAYagAAAAELNU6eptJ+OeCm7a6jNYBLKpGv1zbSDSwxeICkZWXQZqcnXAV9WQyYIIrfH0GhpCoA=="
                        },
                        new
                        {
                            Id = new Guid("4324d7b5-7337-4828-b4b5-e0ec79620e1c"),
                            Email = "user5@example.com",
                            Login = "user5",
                            Password = "AQAAAAIAAYagAAAAEODk/0cxdXE1x/YFpBqFDHw0teeManVuhOuF7D4tpoWKekhffOmoO2acW8wZiB0t4g=="
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserFriends", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Domain.Entities.WatchLaterMovies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("WatchLaterMovies");
                });

            modelBuilder.Entity("Domain.Entities.MovieCountry", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Productions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("CountryOfMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Roles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.RoleReview", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Reviews")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RoleReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Productions");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("CountryOfMovie");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("RoleReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
