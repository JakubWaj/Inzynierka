// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    [Migration("20241229134620_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa96bd79-a049-4998-bbdc-735d04c4fa57"),
                            Name = "United States"
                        },
                        new
                        {
                            Id = new Guid("653a251a-f0c7-4383-b5a2-55704602e47b"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("210efd8c-e2a9-440f-806d-25cc434bca80"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("66ef33c5-aa43-40c6-bf35-f1c0532d21e7"),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("97778d24-60b8-4720-a88b-17da14a173bb"),
                            Name = "Canada"
                        });
                });

            modelBuilder.Entity("Domain.Entities.FavoriteMovies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("FavoriteMovies");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BoxOffice")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a84dcedb-b738-44c2-9aa0-a8814396411d"),
                            BoxOffice = 829895144,
                            Description = "A thief who steals corporate secrets through dream-sharing technology is tasked with planting an idea into a target's subconscious.",
                            Duration = 148,
                            Genre = 11,
                            ReleaseDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Inception"
                        },
                        new
                        {
                            Id = new Guid("929c16a5-36d1-49bd-b458-02fe201c2562"),
                            BoxOffice = 361000000,
                            Description = "Two teenagers share a profound connection after discovering they are swapping bodies.",
                            Duration = 106,
                            Genre = 3,
                            ReleaseDate = new DateTime(2016, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Your Name"
                        },
                        new
                        {
                            Id = new Guid("65045b08-a195-4fa6-820f-3ea94626a50b"),
                            BoxOffice = 466000000,
                            Description = "A hacker discovers the shocking truth about his world and his role in the fight to save humanity.",
                            Duration = 136,
                            Genre = 11,
                            ReleaseDate = new DateTime(1999, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Matrix"
                        },
                        new
                        {
                            Id = new Guid("495135e1-54bf-4e2b-bab7-92608dbddad9"),
                            BoxOffice = 701729206,
                            Description = "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
                            Duration = 169,
                            Genre = 11,
                            ReleaseDate = new DateTime(2014, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Interstellar"
                        },
                        new
                        {
                            Id = new Guid("77010ed8-9fc6-42dc-8696-ad97fcb0fe93"),
                            BoxOffice = 395800000,
                            Description = "A young girl becomes trapped in a mysterious world of spirits and must find her way home.",
                            Duration = 125,
                            Genre = 3,
                            ReleaseDate = new DateTime(2001, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spirited Away"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MovieCountry", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("MovieCountries");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("a84dcedb-b738-44c2-9aa0-a8814396411d"),
                            CountryId = new Guid("aa96bd79-a049-4998-bbdc-735d04c4fa57")
                        },
                        new
                        {
                            MovieId = new Guid("929c16a5-36d1-49bd-b458-02fe201c2562"),
                            CountryId = new Guid("210efd8c-e2a9-440f-806d-25cc434bca80")
                        },
                        new
                        {
                            MovieId = new Guid("65045b08-a195-4fa6-820f-3ea94626a50b"),
                            CountryId = new Guid("aa96bd79-a049-4998-bbdc-735d04c4fa57")
                        },
                        new
                        {
                            MovieId = new Guid("495135e1-54bf-4e2b-bab7-92608dbddad9"),
                            CountryId = new Guid("653a251a-f0c7-4383-b5a2-55704602e47b")
                        },
                        new
                        {
                            MovieId = new Guid("77010ed8-9fc6-42dc-8696-ad97fcb0fe93"),
                            CountryId = new Guid("210efd8c-e2a9-440f-806d-25cc434bca80")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("923a42eb-e5dc-4c80-806c-90852ff80e30"),
                            Biography = "An American actor and film producer.",
                            BirthDate = new DateTime(1974, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Leonardo",
                            LastName = "DiCaprio"
                        },
                        new
                        {
                            Id = new Guid("1e56f7bb-4bbe-4f42-8798-88db2ba93b00"),
                            Biography = "A Japanese animator, filmmaker, and manga artist.",
                            BirthDate = new DateTime(1973, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Makoto",
                            LastName = "Shinkai"
                        },
                        new
                        {
                            Id = new Guid("c19b7bea-f533-413d-bea4-a99028dd562c"),
                            Biography = "An actor known for his roles in The Matrix and John Wick.",
                            BirthDate = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Keanu",
                            LastName = "Reeves"
                        },
                        new
                        {
                            Id = new Guid("c256e371-9c37-429a-85ca-26e5dbfc6987"),
                            Biography = "A British-American film director, producer, and screenwriter.",
                            BirthDate = new DateTime(1970, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Christopher",
                            LastName = "Nolan"
                        },
                        new
                        {
                            Id = new Guid("21fdad5f-dda3-42da-9c16-6b1f35dac51f"),
                            Biography = "A legendary Japanese animator and filmmaker.",
                            BirthDate = new DateTime(1941, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hayao",
                            LastName = "Miyazaki"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("a84dcedb-b738-44c2-9aa0-a8814396411d"),
                            UserId = new Guid("b20469da-48fd-4674-8964-8e66a1babfa9"),
                            Comment = "Amazing movie with a mind-blowing plot!",
                            Id = new Guid("e579fc8e-3c34-4830-8963-f84e7b2a387c"),
                            Rating = 9
                        },
                        new
                        {
                            MovieId = new Guid("929c16a5-36d1-49bd-b458-02fe201c2562"),
                            UserId = new Guid("2e20923f-2100-4c44-add9-5cb7f88b1601"),
                            Comment = "Beautifully animated and emotionally resonant.",
                            Id = new Guid("32ce5383-c838-4c56-a04d-6ff207c3d540"),
                            Rating = 10
                        },
                        new
                        {
                            MovieId = new Guid("65045b08-a195-4fa6-820f-3ea94626a50b"),
                            UserId = new Guid("88dab299-6ac5-4088-97bc-821c354c68a9"),
                            Comment = "A groundbreaking film with iconic visuals.",
                            Id = new Guid("5f528df9-8248-4fc2-82d5-d61ecdeb19a5"),
                            Rating = 10
                        },
                        new
                        {
                            MovieId = new Guid("495135e1-54bf-4e2b-bab7-92608dbddad9"),
                            UserId = new Guid("a528a64c-4fa3-4f4b-a2e8-1d303004769f"),
                            Comment = "A mesmerizing journey through space and time.",
                            Id = new Guid("346f0a83-8322-4370-9ee5-566ab00f469d"),
                            Rating = 9
                        },
                        new
                        {
                            MovieId = new Guid("77010ed8-9fc6-42dc-8696-ad97fcb0fe93"),
                            UserId = new Guid("e429fd86-95a9-44e0-9105-1547fd370eed"),
                            Comment = "A masterpiece of animation and storytelling.",
                            Id = new Guid("5d7edc5b-2616-4637-b400-ab257fd51861"),
                            Rating = 10
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Character")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<int>("MovieProductionRole")
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a15e7f14-4f15-4867-b077-c57cb502b48e"),
                            Character = "Dom Cobb",
                            MovieId = new Guid("a84dcedb-b738-44c2-9aa0-a8814396411d"),
                            MovieProductionRole = 0,
                            PersonId = new Guid("923a42eb-e5dc-4c80-806c-90852ff80e30")
                        },
                        new
                        {
                            Id = new Guid("ee3550ba-e7ec-405f-abfe-eded81a9ca6f"),
                            MovieId = new Guid("929c16a5-36d1-49bd-b458-02fe201c2562"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("1e56f7bb-4bbe-4f42-8798-88db2ba93b00")
                        },
                        new
                        {
                            Id = new Guid("c4cdb059-85f0-427c-bbc3-8d6569fc5e61"),
                            Character = "Neo",
                            MovieId = new Guid("65045b08-a195-4fa6-820f-3ea94626a50b"),
                            MovieProductionRole = 0,
                            PersonId = new Guid("c19b7bea-f533-413d-bea4-a99028dd562c")
                        },
                        new
                        {
                            Id = new Guid("c83a93ad-5b1c-4266-9297-b579e3a8a58f"),
                            MovieId = new Guid("495135e1-54bf-4e2b-bab7-92608dbddad9"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("c256e371-9c37-429a-85ca-26e5dbfc6987")
                        },
                        new
                        {
                            Id = new Guid("12d8d6f3-26bd-4ecf-8308-aec21fe81254"),
                            MovieId = new Guid("77010ed8-9fc6-42dc-8696-ad97fcb0fe93"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("21fdad5f-dda3-42da-9c16-6b1f35dac51f")
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoleReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleReviews");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b20469da-48fd-4674-8964-8e66a1babfa9"),
                            Email = "user1@example.com",
                            Login = "user1",
                            Password = "AQAAAAIAAYagAAAAELsK/bFPLfXPjX3r4pC7CXtHY4Ahc9282iIw1fLdZqydw+Sxf/pgPt/GSjNNYIJvpg=="
                        },
                        new
                        {
                            Id = new Guid("2e20923f-2100-4c44-add9-5cb7f88b1601"),
                            Email = "user2@example.com",
                            Login = "user2",
                            Password = "AQAAAAIAAYagAAAAEI0zoskfxY2wjM0JnkUiiIAoVPA8lEtnyIxlie6Q45zpWD7AVJUjSF5pPH5EcuO23w=="
                        },
                        new
                        {
                            Id = new Guid("88dab299-6ac5-4088-97bc-821c354c68a9"),
                            Email = "user3@example.com",
                            Login = "user3",
                            Password = "AQAAAAIAAYagAAAAEPnMtD29jOT/C7+jGgBkj3uoHEoBnL5gw40Bvk6/4XvmrbB5h4CCx/r7G2eh6eM9kg=="
                        },
                        new
                        {
                            Id = new Guid("a528a64c-4fa3-4f4b-a2e8-1d303004769f"),
                            Email = "user4@example.com",
                            Login = "user4",
                            Password = "AQAAAAIAAYagAAAAEGtJpR05AwtU9dLXSJ+020c35N5JoYS2vNELF05WEak5mTle9HNkwr8N5XIH4+b2oA=="
                        },
                        new
                        {
                            Id = new Guid("e429fd86-95a9-44e0-9105-1547fd370eed"),
                            Email = "user5@example.com",
                            Login = "user5",
                            Password = "AQAAAAIAAYagAAAAECcuuCeTO3MhD6HFHl/fqUz573591iwaEJWSz9rKQdeGHOVhUD5z66/mqQBDERiQdw=="
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserFriends", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Domain.Entities.WatchLaterMovies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WatchLaterMovies");
                });

            modelBuilder.Entity("Domain.Entities.MovieCountry", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Productions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("CountryOfMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Roles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.RoleReview", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Reviews")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RoleReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Productions");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("CountryOfMovie");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("RoleReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
