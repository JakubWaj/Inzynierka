// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    [Migration("20250103163146_relationshipsAdded")]
    partial class relationshipsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf49ec18-c626-447e-945a-0ed9c4bafaad"),
                            Name = "United States"
                        },
                        new
                        {
                            Id = new Guid("47a38d74-2dad-48f8-8726-d7e64fb59cda"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("a7c19289-70ec-40a4-95c6-0986a487089d"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("b956822e-7c58-4c19-938e-9784842b7b12"),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("230826b8-e6bf-447d-ad0a-247d912fe606"),
                            Name = "Canada"
                        });
                });

            modelBuilder.Entity("Domain.Entities.FavoriteMovies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteMovies");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BoxOffice")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3789dac6-1502-4ccd-9547-aa2d00f41541"),
                            BoxOffice = 829895144,
                            Description = "A thief who steals corporate secrets through dream-sharing technology is tasked with planting an idea into a target's subconscious.",
                            Duration = 148,
                            Genre = 11,
                            ReleaseDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Inception"
                        },
                        new
                        {
                            Id = new Guid("6b95fd0a-970c-4bd7-89b0-b7c42d2320aa"),
                            BoxOffice = 361000000,
                            Description = "Two teenagers share a profound connection after discovering they are swapping bodies.",
                            Duration = 106,
                            Genre = 3,
                            ReleaseDate = new DateTime(2016, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Your Name"
                        },
                        new
                        {
                            Id = new Guid("a096e6eb-6c1c-4c7a-bebb-352499887384"),
                            BoxOffice = 466000000,
                            Description = "A hacker discovers the shocking truth about his world and his role in the fight to save humanity.",
                            Duration = 136,
                            Genre = 11,
                            ReleaseDate = new DateTime(1999, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Matrix"
                        },
                        new
                        {
                            Id = new Guid("f86c645d-66aa-4edb-b9aa-347120356f0c"),
                            BoxOffice = 701729206,
                            Description = "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
                            Duration = 169,
                            Genre = 11,
                            ReleaseDate = new DateTime(2014, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Interstellar"
                        },
                        new
                        {
                            Id = new Guid("dcd57444-0ae3-4f8c-9a2e-5a9017fceebf"),
                            BoxOffice = 395800000,
                            Description = "A young girl becomes trapped in a mysterious world of spirits and must find her way home.",
                            Duration = 125,
                            Genre = 3,
                            ReleaseDate = new DateTime(2001, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spirited Away"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MovieCountry", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("MovieCountries");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("3789dac6-1502-4ccd-9547-aa2d00f41541"),
                            CountryId = new Guid("cf49ec18-c626-447e-945a-0ed9c4bafaad")
                        },
                        new
                        {
                            MovieId = new Guid("6b95fd0a-970c-4bd7-89b0-b7c42d2320aa"),
                            CountryId = new Guid("a7c19289-70ec-40a4-95c6-0986a487089d")
                        },
                        new
                        {
                            MovieId = new Guid("a096e6eb-6c1c-4c7a-bebb-352499887384"),
                            CountryId = new Guid("cf49ec18-c626-447e-945a-0ed9c4bafaad")
                        },
                        new
                        {
                            MovieId = new Guid("f86c645d-66aa-4edb-b9aa-347120356f0c"),
                            CountryId = new Guid("47a38d74-2dad-48f8-8726-d7e64fb59cda")
                        },
                        new
                        {
                            MovieId = new Guid("dcd57444-0ae3-4f8c-9a2e-5a9017fceebf"),
                            CountryId = new Guid("a7c19289-70ec-40a4-95c6-0986a487089d")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5c59a60-a5ac-48a8-bebd-b47dd6e9cb44"),
                            Biography = "An American actor and film producer.",
                            BirthDate = new DateTime(1974, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Leonardo",
                            LastName = "DiCaprio"
                        },
                        new
                        {
                            Id = new Guid("0d74da9a-8e31-4306-8155-b1104ac2e828"),
                            Biography = "A Japanese animator, filmmaker, and manga artist.",
                            BirthDate = new DateTime(1973, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Makoto",
                            LastName = "Shinkai"
                        },
                        new
                        {
                            Id = new Guid("7c3877b7-e5e3-427b-a5b3-d53f439ee0fd"),
                            Biography = "An actor known for his roles in The Matrix and John Wick.",
                            BirthDate = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Keanu",
                            LastName = "Reeves"
                        },
                        new
                        {
                            Id = new Guid("a1b0848b-d263-4a13-99d1-c52fd877a767"),
                            Biography = "A British-American film director, producer, and screenwriter.",
                            BirthDate = new DateTime(1970, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Christopher",
                            LastName = "Nolan"
                        },
                        new
                        {
                            Id = new Guid("d58c9197-5a68-4ed3-a0fe-beb9919b7011"),
                            Biography = "A legendary Japanese animator and filmmaker.",
                            BirthDate = new DateTime(1941, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hayao",
                            LastName = "Miyazaki"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("3789dac6-1502-4ccd-9547-aa2d00f41541"),
                            UserId = new Guid("82ae5918-6800-46ed-9f07-a99e9e153b82"),
                            Comment = "Amazing movie with a mind-blowing plot!",
                            Id = new Guid("1fcda9f3-1d72-49e8-ad32-764c9bc1e882"),
                            Rating = 9
                        },
                        new
                        {
                            MovieId = new Guid("6b95fd0a-970c-4bd7-89b0-b7c42d2320aa"),
                            UserId = new Guid("f485e707-2c84-4351-9b43-747284208abe"),
                            Comment = "Beautifully animated and emotionally resonant.",
                            Id = new Guid("24aaaa88-6ca7-4455-8b7a-e76750aeab22"),
                            Rating = 10
                        },
                        new
                        {
                            MovieId = new Guid("a096e6eb-6c1c-4c7a-bebb-352499887384"),
                            UserId = new Guid("2fb78001-03a5-48af-8424-961af5d3c2f7"),
                            Comment = "A groundbreaking film with iconic visuals.",
                            Id = new Guid("0d8b8b69-bb92-4264-8323-0f359229b05e"),
                            Rating = 10
                        },
                        new
                        {
                            MovieId = new Guid("f86c645d-66aa-4edb-b9aa-347120356f0c"),
                            UserId = new Guid("ac9217a1-10d3-4584-af68-6af4fe3241a0"),
                            Comment = "A mesmerizing journey through space and time.",
                            Id = new Guid("4a8a8e1a-d371-498b-a22d-3b7679ece9ce"),
                            Rating = 9
                        },
                        new
                        {
                            MovieId = new Guid("dcd57444-0ae3-4f8c-9a2e-5a9017fceebf"),
                            UserId = new Guid("31d07396-1077-4b24-97c9-4869f9697375"),
                            Comment = "A masterpiece of animation and storytelling.",
                            Id = new Guid("7ef5bb6f-e94d-4f80-ac49-6cd4b60d94c4"),
                            Rating = 10
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Character")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<int>("MovieProductionRole")
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8c038fd-f498-4e51-8b78-dc976c494144"),
                            Character = "Dom Cobb",
                            MovieId = new Guid("3789dac6-1502-4ccd-9547-aa2d00f41541"),
                            MovieProductionRole = 0,
                            PersonId = new Guid("f5c59a60-a5ac-48a8-bebd-b47dd6e9cb44")
                        },
                        new
                        {
                            Id = new Guid("21848865-c1b0-4a7f-a42c-a43a80c84767"),
                            MovieId = new Guid("6b95fd0a-970c-4bd7-89b0-b7c42d2320aa"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("0d74da9a-8e31-4306-8155-b1104ac2e828")
                        },
                        new
                        {
                            Id = new Guid("c3eb0997-32bf-44ae-9634-1cc37f6d459b"),
                            Character = "Neo",
                            MovieId = new Guid("a096e6eb-6c1c-4c7a-bebb-352499887384"),
                            MovieProductionRole = 0,
                            PersonId = new Guid("7c3877b7-e5e3-427b-a5b3-d53f439ee0fd")
                        },
                        new
                        {
                            Id = new Guid("2a1d0001-09cb-4263-8cdf-bbccfd26e41d"),
                            MovieId = new Guid("f86c645d-66aa-4edb-b9aa-347120356f0c"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("a1b0848b-d263-4a13-99d1-c52fd877a767")
                        },
                        new
                        {
                            Id = new Guid("b8761716-44fa-4344-b004-e9797f097dbd"),
                            MovieId = new Guid("dcd57444-0ae3-4f8c-9a2e-5a9017fceebf"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("d58c9197-5a68-4ed3-a0fe-beb9919b7011")
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoleReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleReviews");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82ae5918-6800-46ed-9f07-a99e9e153b82"),
                            Email = "user1@example.com",
                            Login = "user1",
                            Password = "AQAAAAIAAYagAAAAEGW7XXyIoWJMX+Hr0uBHPqgIwY1MLHZ9GUvXTdN2CyBdU/WAS/jHTFm5NJqsTzrh0A=="
                        },
                        new
                        {
                            Id = new Guid("f485e707-2c84-4351-9b43-747284208abe"),
                            Email = "user2@example.com",
                            Login = "user2",
                            Password = "AQAAAAIAAYagAAAAEMXCdB32W46kK99jmcUNjweDfsxX1ryRD7Ux2amLra2NfKfx7yFA1uZfWri7zMhTqA=="
                        },
                        new
                        {
                            Id = new Guid("2fb78001-03a5-48af-8424-961af5d3c2f7"),
                            Email = "user3@example.com",
                            Login = "user3",
                            Password = "AQAAAAIAAYagAAAAEFBcGyJ9cRG1zO8o82iwa2X97rByG0vzryewmEvsdpQl6bo+Df2n+hGHoLGJn8bJPw=="
                        },
                        new
                        {
                            Id = new Guid("ac9217a1-10d3-4584-af68-6af4fe3241a0"),
                            Email = "user4@example.com",
                            Login = "user4",
                            Password = "AQAAAAIAAYagAAAAECEtZqEBF2uxzKC1jy/oxKo/lVcnpQbQ+FQuTGfsIQppSDPla4nM4XfOCiDYp9iC2A=="
                        },
                        new
                        {
                            Id = new Guid("31d07396-1077-4b24-97c9-4869f9697375"),
                            Email = "user5@example.com",
                            Login = "user5",
                            Password = "AQAAAAIAAYagAAAAEHm5n1vdT4MpLcCVKqdI8wJ3NySWlcgA6KE1pA4ghYnEvzYv6c8+Az2FnZFbtW5XOg=="
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserFriends", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Domain.Entities.WatchLaterMovies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("WatchLaterMovies");
                });

            modelBuilder.Entity("Domain.Entities.FavoriteMovies", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.MovieCountry", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Productions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("CountryOfMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Roles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.RoleReview", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Reviews")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RoleReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WatchLaterMovies", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Productions");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("CountryOfMovie");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("RoleReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
