// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    partial class MoviesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6bed9685-887f-4bd5-8d3f-9840cffa644b"),
                            Name = "United States"
                        },
                        new
                        {
                            Id = new Guid("145805bc-90a5-4a9a-8fa8-7af6ab84b8b1"),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = new Guid("61654f41-705a-48a1-a278-3abbd44e2324"),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = new Guid("c3978434-3ea9-40df-a333-1972d0b319dc"),
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = new Guid("b4285968-661f-46aa-81c1-e88eaafe75db"),
                            Name = "Canada"
                        });
                });

            modelBuilder.Entity("Domain.Entities.FavoriteMovies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteMovies");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BoxOffice")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<decimal>("Popularity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Tmdb_Id")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f360574-4a08-4b1e-87db-d774d4260be5"),
                            BoxOffice = 829895144,
                            Description = "A thief who steals corporate secrets through dream-sharing technology is tasked with planting an idea into a target's subconscious.",
                            Duration = 148,
                            Genre = 11,
                            Popularity = 0m,
                            ReleaseDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Inception",
                            Tmdb_Id = 0
                        },
                        new
                        {
                            Id = new Guid("f0ba6810-2c78-4840-a80d-6d0a2fb78b68"),
                            BoxOffice = 361000000,
                            Description = "Two teenagers share a profound connection after discovering they are swapping bodies.",
                            Duration = 106,
                            Genre = 3,
                            Popularity = 0m,
                            ReleaseDate = new DateTime(2016, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Your Name",
                            Tmdb_Id = 0
                        },
                        new
                        {
                            Id = new Guid("de07043b-fdfc-468f-9e3e-f7fcfb10f4c6"),
                            BoxOffice = 466000000,
                            Description = "A hacker discovers the shocking truth about his world and his role in the fight to save humanity.",
                            Duration = 136,
                            Genre = 11,
                            Popularity = 0m,
                            ReleaseDate = new DateTime(1999, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Matrix",
                            Tmdb_Id = 0
                        },
                        new
                        {
                            Id = new Guid("7d41ddb3-1366-4dbf-8809-f5c3bb6af883"),
                            BoxOffice = 701729206,
                            Description = "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival.",
                            Duration = 169,
                            Genre = 11,
                            Popularity = 0m,
                            ReleaseDate = new DateTime(2014, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Interstellar",
                            Tmdb_Id = 0
                        },
                        new
                        {
                            Id = new Guid("2ce62ae7-f5ee-479c-9794-8965321c7ae3"),
                            BoxOffice = 395800000,
                            Description = "A young girl becomes trapped in a mysterious world of spirits and must find her way home.",
                            Duration = 125,
                            Genre = 3,
                            Popularity = 0m,
                            ReleaseDate = new DateTime(2001, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spirited Away",
                            Tmdb_Id = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.MovieCountry", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieId", "CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("MovieCountries");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("9f360574-4a08-4b1e-87db-d774d4260be5"),
                            CountryId = new Guid("6bed9685-887f-4bd5-8d3f-9840cffa644b")
                        },
                        new
                        {
                            MovieId = new Guid("f0ba6810-2c78-4840-a80d-6d0a2fb78b68"),
                            CountryId = new Guid("61654f41-705a-48a1-a278-3abbd44e2324")
                        },
                        new
                        {
                            MovieId = new Guid("de07043b-fdfc-468f-9e3e-f7fcfb10f4c6"),
                            CountryId = new Guid("6bed9685-887f-4bd5-8d3f-9840cffa644b")
                        },
                        new
                        {
                            MovieId = new Guid("7d41ddb3-1366-4dbf-8809-f5c3bb6af883"),
                            CountryId = new Guid("145805bc-90a5-4a9a-8fa8-7af6ab84b8b1")
                        },
                        new
                        {
                            MovieId = new Guid("2ce62ae7-f5ee-479c-9794-8965321c7ae3"),
                            CountryId = new Guid("61654f41-705a-48a1-a278-3abbd44e2324")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1ac190f-8bd7-4edd-ac99-9ad0b8a1a95d"),
                            Biography = "An American actor and film producer.",
                            BirthDate = new DateTime(1974, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Leonardo",
                            LastName = "DiCaprio"
                        },
                        new
                        {
                            Id = new Guid("414eab0c-a88f-44b6-9458-8a2f0ee0fc89"),
                            Biography = "A Japanese animator, filmmaker, and manga artist.",
                            BirthDate = new DateTime(1973, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Makoto",
                            LastName = "Shinkai"
                        },
                        new
                        {
                            Id = new Guid("6bf1f546-1ca2-4daa-87e7-405e5dfbd7ef"),
                            Biography = "An actor known for his roles in The Matrix and John Wick.",
                            BirthDate = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Keanu",
                            LastName = "Reeves"
                        },
                        new
                        {
                            Id = new Guid("21570144-4bf3-4a71-b50d-a1d03fe6c44b"),
                            Biography = "A British-American film director, producer, and screenwriter.",
                            BirthDate = new DateTime(1970, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Christopher",
                            LastName = "Nolan"
                        },
                        new
                        {
                            Id = new Guid("673bced8-fc8d-473c-900a-316a7fa14cdf"),
                            Biography = "A legendary Japanese animator and filmmaker.",
                            BirthDate = new DateTime(1941, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Hayao",
                            LastName = "Miyazaki"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("9f360574-4a08-4b1e-87db-d774d4260be5"),
                            UserId = new Guid("f87fca60-d4f9-41b5-a008-18224ecfdd23"),
                            Comment = "Amazing movie with a mind-blowing plot!",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = new Guid("91e0c611-1545-485f-b614-a29d5ba13b80"),
                            Rating = 9
                        },
                        new
                        {
                            MovieId = new Guid("f0ba6810-2c78-4840-a80d-6d0a2fb78b68"),
                            UserId = new Guid("b41a1fe6-4693-48f5-b808-c780724e47a8"),
                            Comment = "Beautifully animated and emotionally resonant.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = new Guid("75c7f58b-a265-4d6f-b5d4-70c9c53f364e"),
                            Rating = 10
                        },
                        new
                        {
                            MovieId = new Guid("de07043b-fdfc-468f-9e3e-f7fcfb10f4c6"),
                            UserId = new Guid("439b6788-27b2-444f-b5ac-a79179305db2"),
                            Comment = "A groundbreaking film with iconic visuals.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = new Guid("0c508fd9-8c4b-4fa6-a835-cef505f526fb"),
                            Rating = 10
                        },
                        new
                        {
                            MovieId = new Guid("7d41ddb3-1366-4dbf-8809-f5c3bb6af883"),
                            UserId = new Guid("abe9864a-684a-48ba-8243-26ad20093700"),
                            Comment = "A mesmerizing journey through space and time.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = new Guid("d07962ea-5958-48fc-b0c4-18bae0d919ed"),
                            Rating = 9
                        },
                        new
                        {
                            MovieId = new Guid("2ce62ae7-f5ee-479c-9794-8965321c7ae3"),
                            UserId = new Guid("3526d2b5-96d9-4091-88ca-e22ddcc36022"),
                            Comment = "A masterpiece of animation and storytelling.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = new Guid("e870d114-8b9b-4f24-9b1d-3281c0c5bf98"),
                            Rating = 10
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Character")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<int>("MovieProductionRole")
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0262992-175b-46e6-97df-5d9c72e870fd"),
                            Character = "Dom Cobb",
                            MovieId = new Guid("9f360574-4a08-4b1e-87db-d774d4260be5"),
                            MovieProductionRole = 0,
                            PersonId = new Guid("f1ac190f-8bd7-4edd-ac99-9ad0b8a1a95d")
                        },
                        new
                        {
                            Id = new Guid("c00df965-15c3-4e27-8643-09bffadcb313"),
                            MovieId = new Guid("f0ba6810-2c78-4840-a80d-6d0a2fb78b68"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("414eab0c-a88f-44b6-9458-8a2f0ee0fc89")
                        },
                        new
                        {
                            Id = new Guid("2ce4c717-d391-41b7-9908-30b046889fc7"),
                            Character = "Neo",
                            MovieId = new Guid("de07043b-fdfc-468f-9e3e-f7fcfb10f4c6"),
                            MovieProductionRole = 0,
                            PersonId = new Guid("6bf1f546-1ca2-4daa-87e7-405e5dfbd7ef")
                        },
                        new
                        {
                            Id = new Guid("d1e85235-df9b-4a38-93e5-99eba5a1691a"),
                            MovieId = new Guid("7d41ddb3-1366-4dbf-8809-f5c3bb6af883"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("21570144-4bf3-4a71-b50d-a1d03fe6c44b")
                        },
                        new
                        {
                            Id = new Guid("8495dd65-4bb2-442a-8092-91110e9addce"),
                            MovieId = new Guid("2ce62ae7-f5ee-479c-9794-8965321c7ae3"),
                            MovieProductionRole = 1,
                            PersonId = new Guid("673bced8-fc8d-473c-900a-316a7fa14cdf")
                        });
                });

            modelBuilder.Entity("Domain.Entities.RoleReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleReviews");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f87fca60-d4f9-41b5-a008-18224ecfdd23"),
                            Email = "user1@example.com",
                            Login = "user1",
                            Password = "AQAAAAIAAYagAAAAEB/qF65qpvgkgbfQcEhp7uszLOiyYjwI61UPb6Qndv8SHHRaqe6cwiNSI4Rt62adcw=="
                        },
                        new
                        {
                            Id = new Guid("b41a1fe6-4693-48f5-b808-c780724e47a8"),
                            Email = "user2@example.com",
                            Login = "user2",
                            Password = "AQAAAAIAAYagAAAAEMzukbb2v1p/80HUm5qfKPDiXolCSf8m88ukoRqQrXBWC0uKQxGSW8Md6cOKnvuymw=="
                        },
                        new
                        {
                            Id = new Guid("439b6788-27b2-444f-b5ac-a79179305db2"),
                            Email = "user3@example.com",
                            Login = "user3",
                            Password = "AQAAAAIAAYagAAAAENDZXc/OT5Fj8CabysBSd45a/zb0cmHsMacsvjg3t1Mg+0y3F3WCbGYYv0k26/L+mQ=="
                        },
                        new
                        {
                            Id = new Guid("abe9864a-684a-48ba-8243-26ad20093700"),
                            Email = "user4@example.com",
                            Login = "user4",
                            Password = "AQAAAAIAAYagAAAAEI85CFWZza+QsFzI8ehZRxp2b5BNxIzE9rz83mx7J7Fg0QQqAp6GDrhlCVcMRIK38w=="
                        },
                        new
                        {
                            Id = new Guid("3526d2b5-96d9-4091-88ca-e22ddcc36022"),
                            Email = "user5@example.com",
                            Login = "user5",
                            Password = "AQAAAAIAAYagAAAAEJYy4dVR5sLCL+MaCY9xanLD5/8JiBVTVqRUV0DubOH+YnikW2GytAu00BgknZQ7Tw=="
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserFriends", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Domain.Entities.WatchLaterMovies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("WatchLaterMovies");
                });

            modelBuilder.Entity("Domain.Entities.FavoriteMovies", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("FavoriteMovies")
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("WatchedMovies")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Domain.Entities.MovieCountry", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Productions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("CountryOfMovie")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Person", "Person")
                        .WithMany("Roles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Entities.RoleReview", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Reviews")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RoleReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WatchLaterMovies", b =>
                {
                    b.HasOne("Domain.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Productions");
                });

            modelBuilder.Entity("Domain.Entities.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("CountryOfMovie");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.Person", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("FavoriteMovies");

                    b.Navigation("Reviews");

                    b.Navigation("RoleReviews");

                    b.Navigation("WatchedMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
